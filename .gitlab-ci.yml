# This is a simple example illustrating how to build and test .NET Core project
# with GitLab Continuous Integration / Continuous Delivery.
stages:
  - deploy_dev
 
# ### Define variables
#
variables:
  URL: http://201.116.156.199:8080
  # 1) Name of directory where restore and build objects are stored.
  OBJECTS_DIRECTORY: 'obj'
  # 2) Name of directory used for keeping restored dependencies.
  NUGET_PACKAGES_DIRECTORY: '.nuget'
  # 3) A relative path to the source code from project repository root.
  # NOTE: Please edit this path so it matches the structure of your project!
  SOURCE_CODE_PATH: './'

# ### Define global cache rule
#
# Before building the project, all dependencies (e.g. third-party NuGet packages)
# must be restored. Jobs on GitLab.com's Shared Runners are executed on autoscaled machines.
#
# Each machine is used only once (for security reasons) and after that is removed.
# This means that, before every job, a dependency restore must be performed
# because restored dependencies are removed along with machines. Fortunately,
# GitLab provides cache mechanism with the aim of keeping restored dependencies
# for other jobs.
#
# This example shows how to configure cache to pass over restored
# dependencies for re-use.
#
# With global cache rule, cached dependencies will be downloaded before every job
# and then unpacked to the paths as specified below.
cache:
  # Per-stage and per-branch caching.
  key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
  paths:
    # Specify three paths that should be cached:
    #
    # 1) Main JSON file holding information about package dependency tree, packages versions,
    # frameworks etc. It also holds information where to the dependencies were restored.
    - '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/project.assets.json'
    # 2) Other NuGet and MSBuild related files. Also needed.
    - '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/*.csproj.nuget.*'
    # 3) Path to the directory where restored dependencies are kept.
    - '$NUGET_PACKAGES_DIRECTORY'

# ### Restore project dependencies
#
# NuGet packages by default are restored to '.nuget/packages' directory
# in the user's home directory. That directory is out of scope of GitLab caching.
#
# To get around this, a custom path can be specified using the '--packages <PATH>' option
# for 'dotnet restore' command. In this example, a temporary directory is created
# in the root of project repository, so its content can be cached.
#
# Learn more about GitLab cache: https://docs.gitlab.com/ee/ci/caching/index.html
before_script:
  - 'dotnet restore --packages $NUGET_PACKAGES_DIRECTORY'


# ### Build all projects discovered from solution file.
#
# Note: this will fail if you have any projects in your solution that are not
# .NET Core-based projects (e.g. WCF service), which is based on .NET Framework,
# not .NET Core. In this scenario, you will need to build every .NET Core-based
# project by explicitly specifying a relative path to the directory
# where it is located (e.g. 'dotnet build ./src/ConsoleApp').
# Only one project path can be passed as a parameter to 'dotnet build' command.
deploy_dev:
  stage: deploy_dev
  environment:
    name: development
    url: $URL
  only:
    - main
  when: manual
  allow_failure: false
  tags:
    - DOTNET
  script:
    - echo "Building the app..."
    - 'dotnet build --no-restore'
    #- echo "Ejecutando migraciones..."
    #- 'dotnet ef database update --context ApplicationDBContext'
    - 'echo "Desplegando..."'
    - 'dotnet publish $SOURCE_CODE_PATH\\API.csproj -c release -o C:\\BackendDeployTmp'
    # I used powershell to stop the apppool. 
    # I also added a test to verify that the apppool is already Started. (If you try to stop a stopped apppool your job will fail)
    - 'if ((Get-WebAppPoolState -Name backend).Value -eq "Started") { Stop-WebAppPool -Name backend }' 
    # I used /exclude so I doesn't copy config files (in my case it was web.config and appsettings.json)
    # These config files already exists under my IIS because they contains specific configuration (So I copied them manually once because they do not change)
    # deployignore.txt is a file that I added to the root of my solution (next to SolutionName.sln). It contains the config files that I don't want to copy (In my case it contains 2 lines web.config and appsettings.json)
    # E:\\DeployLocation is the folder where your IIS site points to
    - sleep 10
    - 'xcopy /s /e /y /exclude:deployignore.txt "C:\\BackendDeployTmp" "C:\\inetpub\\wwwroot\\backend"'
    - 'xcopy /s /f /y "C:\\BackendDeployTmp\\ServerConfig\\appsettings.json" "C:\\inetpub\\wwwroot\\backend\\"'
    # Added the sleep because the app pool couldn't be started (maybe I can lower the sleep delay)
    - sleep 10
    - 'Start-WebAppPool -Name backend'
